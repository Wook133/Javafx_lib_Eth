package sample;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class P3AbsoluteBasic_sol_lifeInformation extends Contract {
    private static final String BINARY = "60806040526000805460a060020a61ffff0219600160a060020a031990911633171690556002805461ffff19169055610d8f8061003d6000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301a2175781146100875780635f3b1f3b1461014d578063610be654146101705780637cab5e8c146101855780637de46265146101a6578063b02ec52f146101de578063cb44211e14610245575b600080fd5b34801561009357600080fd5b506100a361ffff60043516610266565b6040518084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101105781810151838201526020016100f8565b50505050905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561015957600080fd5b5061016e600160a060020a036004351661052c565b005b34801561017c57600080fd5b5061016e6105b5565b34801561019157600080fd5b5061016e600160a060020a03600435166105da565b3480156101b257600080fd5b506101c261ffff60043516610612565b60408051600160a060020a039092168252519081900360200190f35b3480156101ea57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261016e958335600160a060020a03169536956044949193909101919081908401838280828437509497506106af9650505050505050565b34801561025157600080fd5b5061016e600160a060020a0360043516610834565b60008054819060609061ffff80861691740100000000000000000000000000000000000000009004168111156102fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f7574206f6620496e6465780000000000000000000000000000000000000000604482015290519081900360640190fd5b61ffff851660009081526004602081815260408084205481517f5f8988b50000000000000000000000000000000000000000000000000000000081529151600160a060020a0390911694635f8988b59483810194938390030190829087803b15801561036857600080fd5b505af115801561037c573d6000803e3d6000fd5b505050506040513d602081101561039257600080fd5b505161ffff861660009081526004602081815260408084205481517f893d20e80000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169463893d20e89483810194938390030190829087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b505050506040513d602081101561042957600080fd5b505161ffff871660009081526004602081905260408083205481517f5a9b0b890000000000000000000000000000000000000000000000000000000081529151600160a060020a0390911693635a9b0b89938381019391929182900301818387803b15801561049757600080fd5b505af11580156104ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156104d457600080fd5b8101908080516401000000008111156104ec57600080fd5b820160208101848111156104ff57600080fd5b815164010000000081118282018710171561051957600080fd5b50959b949a509850929650505050505050565b600054600160a060020a0316331461054357600080fd5b6002805461ffff9081166000908152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03979097169687179055845461ffff198116908516600190810190951617909455938152928190529120805460ff19169091179055565b600054600160a060020a031633146105cc57600080fd5b600054600160a060020a0316ff5b600054600160a060020a031633146105f157600080fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b60025460009061ffff808416911681111561068e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f7574206f6620496e6465780000000000000000000000000000000000000000604482015290519081900360640190fd5b505061ffff16600090815260036020526040902054600160a060020a031690565b3360008181526001602081905260409091205460ff1615151461073357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b828261073d610872565b600160a060020a0383168152604060208083018281528451928401929092528351606084019185019080838360005b8381101561078457818101518382015260200161076c565b50505050905090810190601f1680156107b15780820380516001836020036101000a031916815260200191505b509350505050604051809103906000f0801580156107d3573d6000803e3d6000fd5b506002805461ffff9081166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039490941693909317909255805461ffff198116908316600101909216919091179055505050565b600054600160a060020a0316331461084b57600080fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b6040516104e18061088383390190560060806040526040516104e13803806104e183398101604052805160208083015160008054600160a060020a038516600160a060020a03199182161790915560018054909116331790559092018051919290916100619160029190840190610069565b505050610104565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100aa57805160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d75782518255916020019190600101906100bc565b506100e39291506100e7565b5090565b61010191905b808211156100e357600081556001016100ed565b90565b6103ce806101136000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635a9b0b8981146100715780635f8988b5146100fb578063610be6541461012c578063893d20e814610143578063c0da1e6814610158575b600080fd5b34801561007d57600080fd5b50610086610217565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c05781810151838201526020016100a8565b50505050905090810190601f1680156100ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561010757600080fd5b506101106102aa565b60408051600160a060020a039092168252519081900360200190f35b34801561013857600080fd5b506101416102b9565b005b34801561014f57600080fd5b506101106102dc565b34801561016457600080fd5b5061016d6102eb565b6040518084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101da5781810151838201526020016101c2565b50505050905090810190601f1680156102075780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156102a05780601f10610275576101008083540402835291602001916102a0565b820191906000526020600020905b81548152906001019060200180831161028357829003601f168201915b5050505050905090565b600054600160a060020a031690565b600154600160a060020a03163314156102da57600154600160a060020a0316ff5b565b600154600160a060020a031690565b600080546001805460028054604080516020601f6000199785161561010002979097019093168490049586018390048302810183019091528481528695606095600160a060020a039182169590911693928391908301828280156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b505050505090509250925092509091925600a165627a7a7230582032f61ff9c8b4b1422fe9f00f85fc1046b5104bbdc8cc9cb098b8aee7f94e6a6a0029a165627a7a72305820e83f0c555f54e700e6677715f8a34ab75cdc912c099f8d41cd79ec0d6f623aa40029";

    public static final String FUNC_GETPOS = "getPos";

    public static final String FUNC_ADDOWNERS = "addOwners";

    public static final String FUNC_CLOSECONTRACT = "closeContract";

    public static final String FUNC_REMOVEAPPROVAL = "removeApproval";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_ADDINFORMATION = "addInformation";

    public static final String FUNC_ADDAPPROVAL = "addApproval";

    protected P3AbsoluteBasic_sol_lifeInformation(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected P3AbsoluteBasic_sol_lifeInformation(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<Tuple3<String, String, String>> getPos(BigInteger index) {
        final Function function = new Function(FUNC_GETPOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addOwners(String s) {
        final Function function = new Function(
                FUNC_ADDOWNERS, 
                Arrays.<Type>asList(new Address(s)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> closeContract() {
        final Function function = new Function(
                FUNC_CLOSECONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeApproval(String s) {
        final Function function = new Function(
                FUNC_REMOVEAPPROVAL, 
                Arrays.<Type>asList(new Address(s)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getOwner(BigInteger index) {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addInformation(String a, String b) {
        final Function function = new Function(
                FUNC_ADDINFORMATION, 
                Arrays.<Type>asList(new Address(a),
                new Utf8String(b)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addApproval(String s) {
        final Function function = new Function(
                FUNC_ADDAPPROVAL, 
                Arrays.<Type>asList(new Address(s)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<P3AbsoluteBasic_sol_lifeInformation> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(P3AbsoluteBasic_sol_lifeInformation.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<P3AbsoluteBasic_sol_lifeInformation> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(P3AbsoluteBasic_sol_lifeInformation.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static P3AbsoluteBasic_sol_lifeInformation load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new P3AbsoluteBasic_sol_lifeInformation(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static P3AbsoluteBasic_sol_lifeInformation load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new P3AbsoluteBasic_sol_lifeInformation(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
